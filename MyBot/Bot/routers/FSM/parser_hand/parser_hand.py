import logging

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from django.conf import settings
from aiogram.enums import ParseMode

from Bot.FSM_processing.states import ParserHand
from Bot.common.global_variable import type_category
from Bot.keyboard.reply_keybord import start_kbd

router = Router(name=__name__)


logger = logging.getLogger(__name__)

@router.message(F.text=='–†—É—á–Ω–æ–π –≤–≤–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–∏')
async def parser(message: types.Message, state: FSMContext):
    await state.set_state(ParserHand.recipient_state)
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.chat.first_name} '
                f'—Å Telegram id: {message.from_user.id} –Ω–∞–ø–∏—Å–∞–ª:\n'
                f'{message.text}')
    print('–∑–∞–ø—É—â–µ–Ω def parser')
    text = (f'üòä –ü—Ä–∏–≤–µ—Ç <b>{message.chat.first_name}</b> üòä\n'
            f'–í–≤–µ–¥–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–ª–∞—Ç–µ–∂–∞')
    text_message = (f'üò± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{message.chat.first_name}</b> —Å id {message.from_user.id} –Ω–∞–ø–∏—Å–∞–ª:\n'
                    f'{message.text}')
    if message.from_user.id != settings.TELEGRAM_ID_ADMIN:
        await message.bot.send_message(chat_id=settings.TELEGRAM_ID_ADMIN,
                                       text=f'{message.date}\n ------------- \n{text_message}',
                                       parse_mode=ParseMode.HTML)
    await message.answer(f'{text}',
                         parse_mode=ParseMode.HTML,
                         reply_markup=start_kbd)


@router.message(ParserHand.recipient_state, F.text)
async def get_recipient_data(message: types.Message, state: FSMContext):
    await state.update_data(recipient_in_notification=message.text)
    await state.set_state(ParserHand.type_state)
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏',
                         parse_mode=ParseMode.HTML,
                         reply_markup=start_kbd)


@router.message(ParserHand.recipient_state)
async def get_invalid_recipient_data(message: types.Message,):
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–ª–∞—Ç–µ–∂–∞',
                         parse_mode=ParseMode.HTML,
                         reply_markup=start_kbd)

@router.message(ParserHand.type_state, F.text.capitalize().in_([i for i in type_category.keys()]))
async def get_name_type(message: types.Message,
                             state: FSMContext):
    await state.update_data(name_type=message.text.capitalize())
    await state.set_state(ParserHand.category_state)
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–∏',
                         parse_mode=ParseMode.HTML,
                         reply_markup=start_kbd)


@router.message(ParserHand.type_state)
async def get_invalid_name_type(message: types.Message,):
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏',
                         parse_mode=ParseMode.HTML,
                         reply_markup=start_kbd)
